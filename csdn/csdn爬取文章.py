# -*- coding: utf-8 -*-
# @Time    : 2023/3/30 17:16
# @Author  : 南宫乘风
# @Email   : 1794748404@qq.com
# @File    : csdn爬取文章.py.py
# @Software: PyCharm
import requests
import parsel
import tomd2
import os
import re
from bs4 import BeautifulSoup


# 对一篇文章的爬取
def spider_csdn(title_url):  # 目标文章的链接
    head = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.52",
        "Referer": "https://blog.csdn.net/tansty_zh"
    }
    html = requests.get(url=title_url, headers=head).text
    page = parsel.Selector(html)
    # 创建解释器
    title = page.css(".title-article::text").get()
    # content = page.css("article").get()
    content ="<p>本文将介绍如何在 Spring Boot 中集成阿波罗（Apollo）和 Consul，并使用 Apollo 和 Consul 实现配置管理和服务注册与发现的功能。</p>\n\n<h1>1. 什么是阿波罗</h1>\n\n<p>阿波罗是携程开源的分布式配置中心，支持多种编程语言和框架。它提供了一套完整的配置管理解决方案，可以帮助开发者实现配置管理、版本控制、灰度发布等功能。</p>\n\n<p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。服务端基于 Spring Boot 和 Spring Cloud 开发，打包后可以直接运行，不需要额外安装 Tomcat 等应用容器。</p>\n\n<p>Apollo 支持 4 个维度管理 Key-Value 格式的配置：</p>\n\n<ol><li>application (应用)</li>\n\t<li>environment (环境)</li>\n\t<li>cluster (集群)</li>\n\t<li>namespace (命名空间 Namespace 是配置项的集合，类似于一个配置文件的概念)</li>\n</ol><p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/256a3b00b422c88626e98bc63efa701f.jpeg\" /></p>\n\n<p>上图是Apollo配置中心中一个项目的配置首页</p>\n\n<ul><li>在页面左上方的环境列表模块展示了所有的环境和集群，用户可以随时切换。</li>\n\t<li>页面中央展示了两个namespace(application和FX.apollo)的配置信息，默认按照表格模式展示、编辑。用户也可以切换到文本模式，以文件形式查看、编辑。</li>\n\t<li>页面上可以方便地进行发布、回滚、灰度、授权、查看更改历史和发布历史等操作。</li>\n</ul><p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/25f4be0c80b62161d10eff07ac53df42.jpeg\" /></p>\n\n<h2>1.1 集成 Apollo 的原理</h2>\n\n<p>Spring Boot 集成阿波罗可以通过引入 <code>apollo-client</code> 客户端库，并在 Spring Boot 应用程序中配置连接信息和获取配置信息来实现。具体流程如下：</p>\n\n<ol><li>\n\t<p>Spring Boot 应用程序启动时，先加载 <code>bootstrap.yml</code> 或者 <code>bootstrap.properties</code> 文件中的配置信息。</p>\n\t</li>\n\t<li>\n\t<p>在 <code>bootstrap.yml</code> 或者 <code>bootstrap.properties</code> 中配置阿波罗的连接信息（例如，阿波罗的地址、应用程序名称等）。</p>\n\t</li>\n\t<li>\n\t<p>在 Spring Boot 应用程序中注入 <code>@Value</code> 注解中指定的阿波罗配置项的值，即可使用阿波罗管理的配置信息。</p>\n\t</li>\n\t<li>\n\t<p>如果阿波罗的配置信息发生改变，Spring Boot 应用程序会自动从阿波罗更新最新的配置信息，并重新加载应用程序的配置。</p>\n\t</li>\n</ol><h2>1.2. 集成 Apollo 的优势</h2>\n\n<p>集成阿波罗可以带来以下优势：</p>\n\n<ol><li>\n\t<p>管理多个环境的配置：阿波罗提供了环境切换和灰度发布的功能，可以轻松管理多个环境（例如，开发环境、测试环境、生产环境等）的配置信息。</p>\n\t</li>\n\t<li>\n\t<p>实时更新配置：阿波罗支持实时更新配置信息，可以在不重启应用程序的情况下动态更新配置信息。</p>\n\t</li>\n\t<li>\n\t<p>版本控制：阿波罗提供了版本控制的功能，可以记录每个配置项的历史版本，方便回滚和恢复数据。</p>\n\t</li>\n\t<li>\n\t<p>集成多种框架：阿波罗支持多种编程语言和框架，可以轻松集成到各种应用程序中。</p>\n\t</li>\n</ol><p></p>\n\n<h1>2、SpringBoot实战集成Apollo</h1>\n\n<p><img alt=\"\" height=\"1024\" src=\"https://img-blog.csdnimg.cn/fcbacc65f870473e9afdc9cd95181583.png\" width=\"1200\" /></p>\n\n<p> </p>\n\n<h2>1、引入依赖</h2>\n\n<pre>\n<code class=\"language-java\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.5.4&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;com.springboot.demo&lt;/groupId&gt;\n    &lt;artifactId&gt;web-demo&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;web-demo&lt;/name&gt;\n    &lt;description&gt;web-demo&lt;/description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.ctrip.framework.apollo&lt;/groupId&gt;\n            &lt;artifactId&gt;apollo-client&lt;/artifactId&gt;\n            &lt;version&gt;1.5.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;2020.0.3&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n&lt;/project&gt;\n</code></pre>\n\n<h2>2、增加配置文件</h2>\n\n<pre>\n<code class=\"language-java\">apollo:\n  bootstrap:\n    enabled: true\n    eagerLoad:\n      enabled: true\n    namespaces: application,tech.java.consul,tech.java.logback</code></pre>\n\n<h2>3、Apollo配置（公用配置，引用）</h2>\n\n<p><img alt=\"\" height=\"899\" src=\"https://img-blog.csdnimg.cn/d0d94716de2d47919f092b044f20507c.png\" width=\"1200\" /></p>\n\n<p> </p>\n\n<pre>\n<code class=\"language-bash\">spring.cloud.consul.host = localhost\nspring.cloud.consul.port = 8500\nspring.cloud.consul.discovery.prefer-ip-address = true\nspring.cloud.consul.discovery.instance-id = ${spring.application.name}-${POD_IP:localhost}-${server.port}\nconsul.datacenter = uat\nspring.cloud.consul.discovery.healthCheckPath = ${management.context-path}/health\nconsul.cluster = uat\nmanagement.context-path = /actuator\nconsul.version = 1.5.3\n\n\n\n\nlog.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level | [%t] %logger{36} [%L] | %msg%n\nlog.dir = /app/logs/app\n</code></pre>\n\n<h2> 4、Apollo项目配置</h2>\n\n<p>上面为公共的配置引用，可以被多个项目使用</p>\n\n<p>接下来创建一个单独的Apollo项目。</p>\n\n<p>创建一个单独的 Apollo 项目可以分为以下几个步骤：</p>\n\n<ol><li>\n\t<p>登录阿波罗控制台：在浏览器中输入 <code>https://config.xxx.com</code> 地址，使用阿波罗管理员账号登录阿波罗控制台。</p>\n\t</li>\n\t<li>\n\t<p>创建新项目：在阿波罗控制台中，点击左侧导航栏中的“AppList”，然后点击“Create App”按钮，在弹出的对话框中填写应用程序名称、所属集群、所属命名空间等信息，并点击“Create”按钮创建新项目。</p>\n\t</li>\n\t<li>\n\t<p>添加配置项：进入新创建的项目页面后，点击右侧的“Namespace List”标签页，然后选择需要添加配置项的命名空间。在命名空间页面中，点击“Add Item”按钮，填写配置项的 Key 和 Value，并选择该配置项所属的环境（如 dev、test、prod 等）和版本号。</p>\n\t</li>\n\t<li>\n\t<p>下载客户端库：在阿波罗控制台中，点击右上角的“Portal”菜单，进入开发者门户网站。在网站中，选择对应的编程语言和框架，然后下载对应的客户端库（例如，Java + Spring Boot 应用程序需要下载 <code>apollo-client</code> 客户端库）。</p>\n\t</li>\n\t<li>\n\t<p>集成客户端库：将下载好的客户端库引入应用程序的依赖中，然后在应用程序中添加连接阿波罗的配置信息，并使用客户端库从阿波罗获取配置信息。例如，在 Spring Boot 应用程序中，可以在 <code>bootstrap.yml</code> 文件中添加以下配置信息：</p>\n\t</li>\n</ol><pre>\n<code class=\"language-java\">yaml\nspring:\n  application:\n    name: your-application-name\n  profiles:\n    active: dev\napollo:\n  meta: http://apollo-config-server-url\n  bootstrap:\n    enabled: true</code></pre>\n\n<p>其中，<code>your-application-name</code> 是应用程序的名称，<code>dev</code> 是配置环境的名称。<code>http://apollo-config-server-url</code> 是阿波罗的配置服务 URL。</p>\n\n<p>        6.启动应用程序：将集成了 Apollo 的应用程序打包并启动，通过日志和控制台输出可以查看到应用程序从阿波罗获取配置信息的情况。</p>\n\n<p>以上就是创建一个单独的 Apollo 项目的流程，需要注意的是在实际应用中还需根据具体情况进行调整和优化。</p>\n\n<p><img alt=\"\" height=\"820\" src=\"https://img-blog.csdnimg.cn/e78ad2f8ded249b9806f4c2d422bc5b6.png\" width=\"1200\" /></p>\n\n<p> </p>\n\n<pre>\n<code class=\"language-bash\">\nname = qqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n\nserver.port = 8081\nspring.application.name = fqdemo4\nspring.profiles.active = uat\n\nspring.cloud.consul.host = 192.168.102.20\nspring.cloud.consul.port = 8500\nspring.cloud.enabled = true\nspring.cloud.consul.discovery.enabled = true\nspring.cloud.consul.discovery.hostname = 127.0.0.1\nspring.cloud.consul.discovery.register = true\nspring.cloud.consul.discovery.deregister = true\nspring.cloud.consul.discovery.prefer-ip-address = true\nspring.cloud.consul.discovery.instance-id = ${spring.application.name}\nspring.cloud.consul.discovery.service-name = ${spring.application.name}\nspring.cloud.consul.discovery.health-check-url = http://${spring.cloud.consul.discovery.hostname}:${server.port}/\n</code></pre>\n\n<h2>5、SpringBoot代码</h2>\n\n<p></p>\n\n<h3>WebDemoApplication 启动类</h3>\n\n<pre>\n<code class=\"language-java\">package com.springboot.demo.webdemo;\n\nimport com.ctrip.framework.apollo.spring.annotation.EnableApolloConfig;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\n@EnableDiscoveryClient\n@EnableApolloConfig\npublic class WebDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(WebDemoApplication.class, args);\n    }\n\n    #apollo的变量获取\n    @GetMapping(\"/\")\n    @Value(\"${name}\")\n    public String hello(@RequestParam(value = \"name\", defaultValue = \"${name}\") String name) {\n        return String.format(\"Hello %s!\", name);\n    }\n\n}\n</code></pre>\n\n<h3>HelloWorldController类</h3>\n\n<pre>\n<code class=\"language-java\">package com.springboot.demo.webdemo.controller;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.HashMap;\n\n@RestController\n@RequestMapping(\"/hello\")\npublic class HelloWorldController {\n    @GetMapping\n    public String hello(){\n        return \"hello SpringBoot 搭建成功啦\";\n    }\n\n}\n\n\n\n</code></pre>\n\n<h3>EmployeeController 类</h3>\n\n<pre>\n<code class=\"language-java\">package com.springboot.demo.webdemo.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.HashMap;\n\n@RestController\n@RequestMapping(\"/employee\")\npublic class EmployeeController {\n\n    @GetMapping\n    public HashMap&lt;String, String&gt; index(){\n        HashMap&lt;String, String&gt; hashmap = new HashMap&lt;String, String&gt;();\n        hashmap.put(\"姓名\", \"王二\");\n        hashmap.put(\"年龄\", \"27\");\n        hashmap.put(\"工龄\", \"6\");\n\n        return hashmap;\n    }\n}</code></pre>\n\n<p><img alt=\"\" height=\"543\" src=\"https://img-blog.csdnimg.cn/083549268e9a485e9117c8d0a88d3dc2.png\" width=\"1200\" /></p>\n\n<h2> 6、启动测试</h2>\n\n<pre>\n<code class=\"language-bash\">-Dapp.id=156 -Dapollo.meta=http://config.uat.bdata.api.fjf -Denv=uat -javaagent:pinpoint-agent-2.3.3/pinpoint-bootstrap.jar -Dpinpoint.applicationName=fanqiang.uat</code></pre>\n\n<p><img alt=\"\" height=\"598\" src=\"https://img-blog.csdnimg.cn/be43b11d384c44168b9405544ef3248f.png\" width=\"1187\" /></p>\n\n<p> <img alt=\"\" height=\"1029\" src=\"https://img-blog.csdnimg.cn/555b2cb1f77a4dc59b5b09b51dbb55d0.png\" width=\"1200\" /></p>\n\n<h3>name变量</h3>\n\n<p><img alt=\"\" height=\"364\" src=\"https://img-blog.csdnimg.cn/b90420edb71145278f6a8a1fb6c7b81b.png\" width=\"1200\" /></p>\n\n<p><img alt=\"\" height=\"377\" src=\"https://img-blog.csdnimg.cn/f4aa8b2aa46c43af92e03fb1165ae04f.png\" width=\"1200\" /></p>\n\n<p> 修改name变量，无需重启项目</p>\n\n<p> <img alt=\"\" height=\"271\" src=\"https://img-blog.csdnimg.cn/1353820e7c2e44938afe7232ec598306.png\" width=\"1200\" /></p>\n\n<p> <img alt=\"\" height=\"331\" src=\"https://img-blog.csdnimg.cn/f3c251cbea55437ba85a4a4b51f7a4eb.png\" width=\"1200\" /></p>\n\n<h3> 测试两个接口</h3>\n\n<p><img alt=\"\" height=\"344\" src=\"https://img-blog.csdnimg.cn/f023addc829d42eca688dd290aeb1d42.png\" width=\"1200\" /></p>\n\n<p> <img alt=\"\" height=\"423\" src=\"https://img-blog.csdnimg.cn/4868ecdb0c3844d082c732f6cb74aa0c.png\" width=\"1200\" /></p>\n\n<h3> Consul已经自动注册上</h3>\n\n<p><img alt=\"\" height=\"433\" src=\"https://img-blog.csdnimg.cn/a726b3a09f794795a4542207ff46ffd2.png\" width=\"1200\" /></p>\n\n<p> <img alt=\"\" height=\"391\" src=\"https://img-blog.csdnimg.cn/5aeea8fe4a014e04a73153172b940ac7.png\" width=\"1200\" /></p>\n\n<p> </p>\n\n<p>本文介绍了如何在 Spring Boot 中集成阿波罗，并详细说明了其原理和优势。通过使用阿波罗，可以轻松管理多个环境的配置信息，实现配置管理、版本控制、灰度发布等功能。同时，本文还给出了集成阿波罗的最佳实践，希望能够对开发者和运维在实际项目中使用阿波罗提供一些参考和帮助。</p>\n\n<p> 参考文档：</p>\n\n<p><a data-link-icon=\"https://csdnimg.cn/release/blog_editor_html/release2.2.4/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N2N8\" data-link-title=\"https://www.cnblogs.com/mrhelloworld/p/apollo1.html\" href=\"https://www.cnblogs.com/mrhelloworld/p/apollo1.html\" title=\"https://www.cnblogs.com/mrhelloworld/p/apollo1.html\">https://www.cnblogs.com/mrhelloworld/p/apollo1.html</a></p>\n\n<p><a data-link-desc=\"本文已参与「新人创作礼」活动，一起开启掘金创作之路。 什么是Apollo Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到\" data-link-icon=\"https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web//static/favicons/apple-touch-icon.png\" data-link-title=\"spring cloud apollo 配置中心 - 掘金\" href=\"https://juejin.cn/post/7051878293783445541\" title=\"spring cloud apollo 配置中心 - 掘金\">spring cloud apollo 配置中心 - 掘金</a></p>\n\n<p><a data-link-desc=\"Spring Boot 集成 Apollo 配置中心，真香、真强大！，作者：超级小豆丁来源：http://www.mydlq.club/article/42/由于Apollo概念比较多，刚开始使用比较复杂，最好先过一遍概念再动手实践尝试使用。1、背景随着程序功能的日益复杂，程序的配置日益增多，各种功能的开关、参数的配置、服务器的地址……对程序配置的期望值也...\" data-link-icon=\"https://blog.51cto.com/favicon.ico\" data-link-title=\"Spring Boot 集成 Apollo 配置中心，真香、真强大！_51CTO博客_apollo集成springcloud\" href=\"https://blog.51cto.com/u_15162069/2897810\" title=\"Spring Boot 集成 Apollo 配置中心，真香、真强大！_51CTO博客_apollo集成springcloud\">Spring Boot 集成 Apollo 配置中心，真香、真强大！_51CTO博客_apollo集成springcloud</a></p>\n"
    content = re.sub("<a.*?a>", "", content)
    content = re.sub("<br>", "", content)
    content = re.sub("&lt;", "<", content)  # 新增
    content = re.sub("&gt;", ">", content)  # 新增
    print(content)
    text = tomd2.Tomd(content).markdown

    # 转换为markdown 文件
    path = os.getcwd()  # 获取当前的目录路径
    file_name = "./passage"
    final_road = path + file_name
    try:
        os.mkdir(final_road)
        print('创建成功！')
    except:
        print('目录已经存在或异常')
    with open(final_road + r"./" + title + ".md", mode="w", encoding="utf-8") as f:
        f.write("#" + title)
        f.write(text)


def main():
    print("本项目由tansty开发")
    url = 'https://blog.csdn.net/heian_99/article/details/128476559'
    spider_csdn(url)


if __name__ == '__main__':
    main()
