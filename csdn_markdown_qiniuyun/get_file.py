# -*- coding: utf-8 -*-
# @Time    : 2023/4/12 14:02
# @Author  : 南宫乘风
# @Email   : 1794748404@qq.com
# @File    : get_file.py
# @Software: PyCharm
import json
import re

text = {
    'code': 200,
    'msg': 'success',
    'data': {
        'article_id': '130058875',
        'title': 'Nginx模板自动化',
        'description': '在日常工作中，我们经常需要创建Nginx配置文件的模板，以便在不同的环境中快速部署和配置Nginx服务器。然而，这样的任务通常需要重复性高、耗时长，且容易出错。为了加快这些任务的完成，并提高工作效率，可以使用一些自动化工具来简化Nginx配置文件的生成和管理。其中，一种常见的方法是使用基于文本替换的模板引擎，如Jinja2、Mustache等，将Nginx配置文件中的变量替换为实际的值。',
        'content': '<h1><a id="_1"></a>背景</h1>\n<p>在日常工作中，我们经常需要创建Nginx配置文件的模板，以便在不同的环境中快速部署和配置Nginx服务器。然而，这样的任务通常需要重复性高、耗时长，且容易出错。为了加快这些任务的完成，并提高工作效率，可以使用一些自动化工具来简化Nginx配置文件的生成和管理。</p>\n<p>其中，一种常见的方法是使用基于文本替换的模板引擎，如Jinja2、Mustache等，将Nginx配置文件中的变量替换为实际的值。例如，可以将配置文件中的端口号、域名、SSL证书路径等信息作为变量，在部署时再根据实际情况进行替换，从而快速生成满足需求的Nginx配置文件。此外，还可以使用版本控制工具（如Git）来对Nginx配置文件进行管理，并利用CI/CD工具（如Jenkins）自动构建和部署Nginx服务器。</p>\n<p>通过自动化工具的使用，可以大大提高Nginx服务器的配置效率和准确性，并更好地适应不同环境下的需求。</p>\n<h1><a id="1_7"></a>1、需求</h1>\n<p>开发部门 不定期会更新新的项目上线，会用到域名绑定服务器 进行暴露。</p>\n<h2><a id="_9"></a>流程</h2>\n<ol>\n<li>开发部门提出域名订单需求，包括需要绑定的域名和相应的服务器地址。</li>\n<li><a href="https://blog.csdn.net/heian_99/article/details/129682959">运维部门在DNS管理控制面板中添加DNS解析记录，将需要绑定的域名解析到相应的服务器IP地址。</a></li>\n<li>运维部门在Nginx配置中创建新的server块，配置要绑定的域名和相应的站点信息，例如文档根目录、日志文件、SSL证书等。</li>\n<li>运维部门将Nginx配置文件中的变量和实际的服务器地址进行替换，例如替换$server_name变量为实际要绑定的域名。</li>\n<li>运维部门重载或重新启动Nginx服务，使新的配置生效。</li>\n<li>最终，域名解析到相应的服务器地址，并由Nginx正确地将请求路由到相应的站点。<br>\n<img src="https://img-blog.csdnimg.cn/a7b17f5b94b34c36a5a59113f68438c1.png" alt="在这里插入图片描述"></li>\n</ol>\n<h1><a id="2kubernetesingress_18"></a>2、kubernetes+ingress实战</h1>\n<h2><a id="1kubernetesingress_19"></a>1、转发kubernetes的ingress</h2>\n<p><strong>kubernetes-cluster.conf</strong></p>\n<pre><code class="prism language-bash">upstream kubernetes-cluster <span class="token punctuation">{</span>\n  server <span class="token number">192.168</span>.82.42 <span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>\n  keepalive <span class="token number">16</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2><a id="2_28"></a>2、域名配置</h2>\n<p><strong>ogateway-uat.xxxx.net.conf</strong></p>\n<pre><code class="prism language-bash">server <span class="token punctuation">{</span>\n        listen       <span class="token number">80</span><span class="token punctuation">;</span>\n        server_name   ogateway-uat.xxxx.net<span class="token punctuation">;</span>\n        rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://<span class="token variable">$host</span>/<span class="token variable">$1</span> permanent<span class="token punctuation">;</span>\n        <span class="token comment"># IP白名单</span>\n        include /usr/local/openresty/nginx/whitelist/corporation.conf<span class="token punctuation">;</span>\n    \n<span class="token punctuation">}</span>\nserver <span class="token punctuation">{</span>\n        listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>\n        server_name   ogateway-uat.xxxx.net<span class="token punctuation">;</span>\n\n\n        ssl                   on<span class="token punctuation">;</span>\n        ssl_certificate      /usr/local/openresty/nginx/ssl/xxx.net.crt<span class="token punctuation">;</span>\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/xxx.net.key<span class="token punctuation">;</span>\n        include ssl.conf<span class="token punctuation">;</span>\n        <span class="token comment"># IP白名单 放开时间0920-0930</span>\n        include /usr/local/openresty/nginx/whitelist/corporation.conf<span class="token punctuation">;</span>\n        location / <span class="token punctuation">{</span>\n            proxy_pass  http://kubernetes-cluster<span class="token punctuation">;</span>\n        include https_proxy.conf<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h1><a id="3_58"></a>3、反向代理</h1>\n<pre><code class="prism language-bash">server <span class="token punctuation">{</span>\n        listen       <span class="token number">80</span><span class="token punctuation">;</span>\n        server_name  customer-uat.xxxxx.com<span class="token punctuation">;</span>\n        <span class="token comment"># IP白名单</span>\n        include /usr/local/openresty/nginx/whitelist/corporation.conf<span class="token punctuation">;</span>\n        \n        rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://<span class="token variable">$host</span>/<span class="token variable">$1</span> permanent<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nserver <span class="token punctuation">{</span>\n        listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>\n        server_name  customer-uat.xxxx.com<span class="token punctuation">;</span>\n        <span class="token comment"># IP白名单</span>\n        include /usr/local/openresty/nginx/whitelist/corporation.conf<span class="token punctuation">;</span>\n\n        ssl                   on<span class="token punctuation">;</span>\n        ssl_certificate      /usr/local/openresty/nginx/ssl/xxxx.com.crt<span class="token punctuation">;</span>\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/xxxxx.com.key<span class="token punctuation">;</span>\n        include ssl.conf<span class="token punctuation">;</span>\n\n        location / <span class="token punctuation">{</span>\n            proxy_pass  http://192.168.102.202<span class="token punctuation">;</span>\n            include proxy.conf<span class="token punctuation">;</span>\n            proxy_set_header X-Forwarded-Proto https<span class="token punctuation">;</span>\n            proxy_set_header X-Forwarded-HTTPS on<span class="token punctuation">;</span>\n            add_header Front-End-Https on<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h1><a id="4_91"></a>4、负载轮询代理</h1>\n<pre><code class="prism language-bash">upstream xxxx-backend-uat <span class="token punctuation">{</span>\n     <span class="token comment">#server 192.168.99.147:1201;</span>\n     server <span class="token number">192.168</span>.82.42<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nserver <span class="token punctuation">{</span>\n    listen <span class="token number">80</span><span class="token punctuation">;</span>\n    server_name inhouse-xxxx-uat.xxxx.com<span class="token punctuation">;</span>\n    include /usr/local/openresty/nginx/whitelist/corporation.conf<span class="token punctuation">;</span>\n\n\tlocation / <span class="token punctuation">{</span>\n        proxy_pass  http://xxxx-backend-uat<span class="token punctuation">;</span>\n        include http_proxy.conf<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nserver <span class="token punctuation">{</span>\n    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>\n    server_name xxxx-backend-uat.xxxx.com<span class="token punctuation">;</span>\n    include /usr/local/openresty/nginx/whitelist/corporation.conf<span class="token punctuation">;</span>\n\n    ssl                   on<span class="token punctuation">;</span>\n    ssl_certificate      /usr/local/openresty/nginx/ssl/xxxx.com.crt<span class="token punctuation">;</span>\n    ssl_certificate_key  /usr/local/openresty/nginx/ssl/xxxx.com.key<span class="token punctuation">;</span>\n    include ssl.conf<span class="token punctuation">;</span>\n\n    location / <span class="token punctuation">{</span>\n        proxy_pass  http://xxxx-backend-uat<span class="token punctuation">;</span>\n        include http_proxy.conf<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h1><a id="5_124"></a>5、自动化处理</h1>\n<p><strong>add_nginx.sh</strong></p>\n<pre><code class="prism language-bash"><span class="token shebang important">#!/bin/bash</span>\n\n<span class="token comment">#日志级别 debug-1, info-2, warn-3, error-4, always-5</span>\n<span class="token assign-left variable">LOG_LEVEL</span><span class="token operator">=</span><span class="token number">1</span>\n\n<span class="token comment">#日志名称</span>\n<span class="token assign-left variable">job_name</span><span class="token operator">=</span>add_nginx\n\n<span class="token comment">#脚本目录</span>\n<span class="token assign-left variable">script_dir</span><span class="token operator">=</span>/opt\n\n<span class="token comment">#日志文件</span>\n<span class="token assign-left variable">LOG_FILE</span><span class="token operator">=</span>./<span class="token variable">${job_name}</span>.log\n\n<span class="token comment">#调试日志</span>\n<span class="token keyword">function</span> <span class="token function-name function">log_debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"[DEBUG] <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">\'+%Y-%m-%d %H:%M:%S\'</span><span class="token variable">)</span></span> <span class="token variable">$@</span>"</span>\n\t<span class="token punctuation">[</span> <span class="token variable">$LOG_LEVEL</span> -le <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$content</span> <span class="token operator">&gt;&gt;</span><span class="token variable">$LOG_FILE</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\\033">\\033</span>[32m"</span> <span class="token variable">${content}</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[0m"</span>\n<span class="token punctuation">}</span>\n<span class="token comment">#信息日志</span>\n<span class="token keyword">function</span> <span class="token function-name function">log_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"[INFO] <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">\'+%Y-%m-%d %H:%M:%S\'</span><span class="token variable">)</span></span> <span class="token variable">$@</span>"</span>\n\t<span class="token punctuation">[</span> <span class="token variable">$LOG_LEVEL</span> -le <span class="token number">2</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$content</span> <span class="token operator">&gt;&gt;</span><span class="token variable">$LOG_FILE</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\\033">\\033</span>[32m"</span> <span class="token variable">${content}</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[0m"</span>\n<span class="token punctuation">}</span>\n<span class="token comment">#警告日志</span>\n<span class="token keyword">function</span> <span class="token function-name function">log_warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"[WARN] <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">\'+%Y-%m-%d %H:%M:%S\'</span><span class="token variable">)</span></span> <span class="token variable">$@</span>"</span>\n\t<span class="token punctuation">[</span> <span class="token variable">$LOG_LEVEL</span> -le <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$content</span> <span class="token operator">&gt;&gt;</span><span class="token variable">$LOG_FILE</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\\033">\\033</span>[33m"</span> <span class="token variable">${content}</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[0m"</span>\n<span class="token punctuation">}</span>\n<span class="token comment">#错误日志</span>\n<span class="token keyword">function</span> <span class="token function-name function">log_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"[ERROR] <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">\'+%Y-%m-%d %H:%M:%S\'</span><span class="token variable">)</span></span> <span class="token variable">$@</span>"</span>\n\t<span class="token punctuation">[</span> <span class="token variable">$LOG_LEVEL</span> -le <span class="token number">4</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$content</span> <span class="token operator">&gt;&gt;</span><span class="token variable">$LOG_FILE</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\\033">\\033</span>[31m"</span> <span class="token variable">${content}</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[0m"</span>\n<span class="token punctuation">}</span>\n<span class="token comment">#一直都会打印的日志</span>\n<span class="token keyword">function</span> <span class="token function-name function">log_always</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"[ALWAYS] <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">\'+%Y-%m-%d %H:%M:%S\'</span><span class="token variable">)</span></span> <span class="token variable">$@</span>"</span>\n\t<span class="token punctuation">[</span> <span class="token variable">$LOG_LEVEL</span> -le <span class="token number">5</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$content</span> <span class="token operator">&gt;&gt;</span><span class="token variable">$LOG_FILE</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\\033">\\033</span>[32m"</span> <span class="token variable">${content}</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[0m"</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">get_Whitelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment"># 提示用户输入选项</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">"1. 使用白名单"</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">"2. 不使用白名单"</span>\n\n\t<span class="token comment"># 获取用户输入</span>\n\t<span class="token builtin class-name">read</span> -p <span class="token string">"请选择要使用白名单配置："</span> choice_whitelist\n\n\t<span class="token comment"># 使用case语句根据用户选择设置变量</span>\n\t<span class="token keyword">case</span> <span class="token variable">$choice_whitelist</span> <span class="token keyword">in</span>\n\t<span class="token number">1</span><span class="token punctuation">)</span>\n\t\t<span class="token assign-left variable">use_whitelist</span><span class="token operator">=</span>true\n\t\t<span class="token punctuation">;</span><span class="token punctuation">;</span>\n\t<span class="token number">2</span><span class="token punctuation">)</span>\n\t\t<span class="token assign-left variable">use_whitelist</span><span class="token operator">=</span>false\n\t\t<span class="token punctuation">;</span><span class="token punctuation">;</span>\n\t*<span class="token punctuation">)</span>\n\t\t<span class="token builtin class-name">echo</span> <span class="token string">"错误：请输入正确的选项"</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span>\n\t\t<span class="token builtin class-name">exit</span> <span class="token number">1</span>\n\t\t<span class="token punctuation">;</span><span class="token punctuation">;</span>\n\t<span class="token keyword">esac</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">set_whitelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$use_whitelist</span>"</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n    log_info <span class="token string">"已经设置IP白名单"</span>\n    <span class="token function">sed</span> -i -r <span class="token string">\'s/^(\\s*)#(.*include\\s*\\/usr\\/local\\/openresty\\/nginx\\/whitelist\\/corporation\\.conf;.*)$/\\1\\2/g\'</span> <span class="token string">"<span class="token variable">$conf_file</span>"</span>\n  <span class="token keyword">else</span>\n    log_info <span class="token string">"不使用IP白名单"</span>\n  <span class="token keyword">fi</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">check_nginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token assign-left variable">conf_file</span><span class="token operator">=</span><span class="token string">"/chen/company_shell/<span class="token variable">$realm_name</span>.conf"</span>\n\t<span class="token comment"># 检查Nginx配置文件</span>\n\t<span class="token keyword">if</span> nginx -t <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">;</span> <span class="token keyword">then</span>\n\t\t<span class="token builtin class-name">echo</span> <span class="token string">"Nginx configuration test passed."</span>\n\t<span class="token keyword">else</span>\n\t\t<span class="token builtin class-name">echo</span> <span class="token string">"Nginx configuration test failed. Please check your configuration file."</span>\n\t\t<span class="token builtin class-name">exit</span> <span class="token number">1</span>\n\t<span class="token keyword">fi</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">kubernetes_nginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token assign-left variable">re_301</span><span class="token operator">=</span><span class="token string">\'rewrite ^/(.*)$ https://$host/$1 permanent;\'</span>\n\t<span class="token assign-left variable">tld</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$realm_name</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> -E <span class="token string">\'s/.*\\.([^.]+\\.[^.]+)$/\\1/\'</span><span class="token variable">)</span></span>\n\t<span class="token function">cat</span> <span class="token operator">&gt;</span><span class="token variable">$realm_name</span>.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOF\nserver {\n        listen       80;\n        server_name  <span class="token variable">$realm_name</span>;\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n        <span class="token variable">$re_301</span>\n}\nserver {\n        listen       443 ssl;\n        server_name  <span class="token variable">$realm_name</span>;\n        ssl                   on;\n        ssl_certificate      /usr/local/openresty/nginx/ssl/<span class="token variable">$tld</span>.crt;\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/<span class="token variable">$tld</span>.key;\n        include ssl.conf;\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n\n        location / {\n           proxy_pass  http://kubernetes-cluster;\n           include https_proxy.conf;\n        }\n}\nEOF</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">proxy_nginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin class-name">read</span> -p <span class="token string">"设置反向代理（列如：http://172.18.199.115）："</span> proxy_ip\n\t<span class="token assign-left variable">re_301</span><span class="token operator">=</span><span class="token string">\'rewrite ^/(.*)$ https://$host/$1 permanent;\'</span>\n\t<span class="token assign-left variable">tld</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$realm_name</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> -E <span class="token string">\'s/.*\\.([^.]+\\.[^.]+)$/\\1/\'</span><span class="token variable">)</span></span>\n\t<span class="token function">cat</span> <span class="token operator">&gt;</span><span class="token variable">$realm_name</span>.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOF\nserver {\n        listen       80;\n        server_name  <span class="token variable">$realm_name</span>;\n\t    <span class="token variable">$re_301</span>\n\t\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n}\nserver {\n        listen       443 ssl;\n        server_name  <span class="token variable">$realm_name</span>;\n\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n\n        ssl                   on;\n        ssl_certificate      /usr/local/openresty/nginx/ssl/<span class="token variable">$tld</span>.crt;\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/<span class="token variable">$tld</span>.key;\n        include ssl.conf;\n\n        location / {\n        \tproxy_pass  <span class="token variable">$proxy_ip</span>;\n\t\tinclude https_proxy.conf;\n        }\n}\nEOF</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">upstream_nginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tpass\n<span class="token punctuation">}</span>\n\n<span class="token comment"># 定义函数：生产域名</span>\n<span class="token keyword">function</span> <span class="token function-name function">set_kubernetes_nginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment"># TODO: 在这里实现生产域名的操作</span>\n\tlog_info <span class="token string">"开始配置nginx模板"</span>\n\t<span class="token builtin class-name">read</span> -p <span class="token string">"请输您的域名:  "</span> realm_name\n\tlog_info <span class="token string">"域名记录： <span class="token variable">$realm_name</span>"</span>\n\tget_Whitelist\n\tkubernetes_nginx\n\t<span class="token comment"># 输出变量值</span>\n\tset_whitelist\n\t<span class="token comment">#配置文件校检</span>\n\tcheck_nginx\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">set_reverse_proxy_nginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment"># TODO: 在这里实现生产域名的操作</span>\n\tlog_info <span class="token string">"开始配置nginx模板"</span>\n\t<span class="token builtin class-name">read</span> -p <span class="token string">"请输您的域名:  "</span> realm_name\n\tlog_info <span class="token string">"域名记录： <span class="token variable">$realm_name</span>"</span>\n\tget_Whitelist\n\tproxy_nginx\n\t<span class="token comment"># 输出变量值</span>\n\tset_whitelist\n\t<span class="token comment">#配置文件校检</span>\n\tcheck_nginx\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function-name function">set_upstream_proxy_nginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment"># TODO: 在这里实现生产域名的操作</span>\n\tlog_info <span class="token string">"开始配置nginx模板"</span>\n\t<span class="token builtin class-name">read</span> -p <span class="token string">"请输您的域名:  "</span> realm_name\n\tlog_info <span class="token string">"域名记录： <span class="token variable">$realm_name</span>"</span>\n\tget_Whitelist\n\tupstream_nginx\n\t<span class="token comment"># 输出变量值</span>\n\tset_whitelist\n\t<span class="token comment">#配置文件校检</span>\n\tcheck_nginx\n<span class="token punctuation">}</span>\n\n<span class="token comment"># 定义主函数</span>\n<span class="token keyword">function</span> <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment"># 显示菜单</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">"请选择一个选项："</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">"1. kubernetes接入"</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">"2. 反向代理接入"</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">"3. 负载均衡接入"</span>\n\n\t<span class="token comment"># 读取用户输入</span>\n\t<span class="token builtin class-name">read</span> -p <span class="token string">"请输您的选择:  "</span> choice\n\n\t<span class="token comment"># 根据用户输入选择对应的操作</span>\n\t<span class="token keyword">case</span> <span class="token variable">$choice</span> <span class="token keyword">in</span>\n\t<span class="token number">1</span><span class="token punctuation">)</span> set_kubernetes_nginx <span class="token punctuation">;</span><span class="token punctuation">;</span>\n\t<span class="token number">2</span><span class="token punctuation">)</span> set_reverse_proxy_nginx <span class="token punctuation">;</span><span class="token punctuation">;</span>\n\t<span class="token number">3</span><span class="token punctuation">)</span> set_upstream_proxy_nginx <span class="token punctuation">;</span><span class="token punctuation">;</span>\n\t*<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"无效的选项，请重新输入"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>\n\t<span class="token keyword">esac</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment"># 调用主函数</span>\nmain\n\n</code></pre>\n<p><img src="https://img-blog.csdnimg.cn/4133ca74f16e49aea444f688035065a2.png" alt="在这里插入图片描述"></p>\n\n',
        'markdowncontent': '\n# 背景\n在日常工作中，我们经常需要创建Nginx配置文件的模板，以便在不同的环境中快速部署和配置Nginx服务器。然而，这样的任务通常需要重复性高、耗时长，且容易出错。为了加快这些任务的完成，并提高工作效率，可以使用一些自动化工具来简化Nginx配置文件的生成和管理。\n\n其中，一种常见的方法是使用基于文本替换的模板引擎，如Jinja2、Mustache等，将Nginx配置文件中的变量替换为实际的值。例如，可以将配置文件中的端口号、域名、SSL证书路径等信息作为变量，在部署时再根据实际情况进行替换，从而快速生成满足需求的Nginx配置文件。此外，还可以使用版本控制工具（如Git）来对Nginx配置文件进行管理，并利用CI/CD工具（如Jenkins）自动构建和部署Nginx服务器。\n\n通过自动化工具的使用，可以大大提高Nginx服务器的配置效率和准确性，并更好地适应不同环境下的需求。\n# 1、需求\n开发部门 不定期会更新新的项目上线，会用到域名绑定服务器 进行暴露。\n##  流程\n\n 1. 开发部门提出域名订单需求，包括需要绑定的域名和相应的服务器地址。   \n 2. [运维部门在DNS管理控制面板中添加DNS解析记录，将需要绑定的域名解析到相应的服务器IP地址。](https://blog.csdn.net/heian_99/article/details/129682959)   \n 3. 运维部门在Nginx配置中创建新的server块，配置要绑定的域名和相应的站点信息，例如文档根目录、日志文件、SSL证书等。   \n 4. 运维部门将Nginx配置文件中的变量和实际的服务器地址进行替换，例如替换$server_name变量为实际要绑定的域名。   \n 5. 运维部门重载或重新启动Nginx服务，使新的配置生效。 \n 6. 最终，域名解析到相应的服务器地址，并由Nginx正确地将请求路由到相应的站点。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a7b17f5b94b34c36a5a59113f68438c1.png)\n# 2、kubernetes+ingress实战\n## 1、转发kubernetes的ingress\n**kubernetes-cluster.conf**\n```bash\nupstream kubernetes-cluster {\n  server 192.168.82.42 weight=5;\n  keepalive 16;\n}\n```\n\n## 2、域名配置\n**ogateway-uat.xxxx.net.conf**\n```bash\nserver {\n        listen       80;\n        server_name   ogateway-uat.xxxx.net;\n        rewrite ^/(.*)$ https://$host/$1 permanent;\n        # IP白名单\n        include /usr/local/openresty/nginx/whitelist/corporation.conf;\n    \n}\nserver {\n        listen       443 ssl;\n        server_name   ogateway-uat.xxxx.net;\n\n\n        ssl                   on;\n        ssl_certificate      /usr/local/openresty/nginx/ssl/xxx.net.crt;\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/xxx.net.key;\n        include ssl.conf;\n        # IP白名单 放开时间0920-0930\n        include /usr/local/openresty/nginx/whitelist/corporation.conf;\n        location / {\n            proxy_pass  http://kubernetes-cluster;\n        include https_proxy.conf;\n        }\n}\n\n```\n\n# 3、反向代理\n\n```bash\nserver {\n        listen       80;\n        server_name  customer-uat.xxxxx.com;\n        # IP白名单\n        include /usr/local/openresty/nginx/whitelist/corporation.conf;\n        \n        rewrite ^/(.*)$ https://$host/$1 permanent;\n}\nserver {\n        listen       443 ssl;\n        server_name  customer-uat.xxxx.com;\n        # IP白名单\n        include /usr/local/openresty/nginx/whitelist/corporation.conf;\n\n        ssl                   on;\n        ssl_certificate      /usr/local/openresty/nginx/ssl/xxxx.com.crt;\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/xxxxx.com.key;\n        include ssl.conf;\n\n        location / {\n            proxy_pass  http://192.168.102.202;\n            include proxy.conf;\n            proxy_set_header X-Forwarded-Proto https;\n            proxy_set_header X-Forwarded-HTTPS on;\n            add_header Front-End-Https on;\n        }\n}\n\n```\n\n# 4、负载轮询代理\n```bash\nupstream xxxx-backend-uat {\n     #server 192.168.99.147:1201;\n     server 192.168.82.42;\n}\nserver {\n    listen 80;\n    server_name inhouse-xxxx-uat.xxxx.com;\n    include /usr/local/openresty/nginx/whitelist/corporation.conf;\n\n\tlocation / {\n        proxy_pass  http://xxxx-backend-uat;\n        include http_proxy.conf;\n    }\n}\nserver {\n    listen 443 ssl;\n    server_name xxxx-backend-uat.xxxx.com;\n    include /usr/local/openresty/nginx/whitelist/corporation.conf;\n\n    ssl                   on;\n    ssl_certificate      /usr/local/openresty/nginx/ssl/xxxx.com.crt;\n    ssl_certificate_key  /usr/local/openresty/nginx/ssl/xxxx.com.key;\n    include ssl.conf;\n\n    location / {\n        proxy_pass  http://xxxx-backend-uat;\n        include http_proxy.conf;\n    }\n}\n```\n\n# 5、自动化处理\n**add_nginx.sh**\n```bash\n#!/bin/bash\n\n#日志级别 debug-1, info-2, warn-3, error-4, always-5\nLOG_LEVEL=1\n\n#日志名称\njob_name=add_nginx\n\n#脚本目录\nscript_dir=/opt\n\n#日志文件\nLOG_FILE=./${job_name}.log\n\n#调试日志\nfunction log_debug() {\n\tcontent="[DEBUG] $(date \'+%Y-%m-%d %H:%M:%S\') $@"\n\t[ $LOG_LEVEL -le 1 ] && echo $content >>$LOG_FILE && echo -e "\\033[32m" ${content} "\\033[0m"\n}\n#信息日志\nfunction log_info() {\n\tcontent="[INFO] $(date \'+%Y-%m-%d %H:%M:%S\') $@"\n\t[ $LOG_LEVEL -le 2 ] && echo $content >>$LOG_FILE && echo -e "\\033[32m" ${content} "\\033[0m"\n}\n#警告日志\nfunction log_warn() {\n\tcontent="[WARN] $(date \'+%Y-%m-%d %H:%M:%S\') $@"\n\t[ $LOG_LEVEL -le 3 ] && echo $content >>$LOG_FILE && echo -e "\\033[33m" ${content} "\\033[0m"\n}\n#错误日志\nfunction log_err() {\n\tcontent="[ERROR] $(date \'+%Y-%m-%d %H:%M:%S\') $@"\n\t[ $LOG_LEVEL -le 4 ] && echo $content >>$LOG_FILE && echo -e "\\033[31m" ${content} "\\033[0m"\n}\n#一直都会打印的日志\nfunction log_always() {\n\tcontent="[ALWAYS] $(date \'+%Y-%m-%d %H:%M:%S\') $@"\n\t[ $LOG_LEVEL -le 5 ] && echo $content >>$LOG_FILE && echo -e "\\033[32m" ${content} "\\033[0m"\n}\n\nfunction get_Whitelist() {\n\t# 提示用户输入选项\n\techo "1. 使用白名单"\n\techo "2. 不使用白名单"\n\n\t# 获取用户输入\n\tread -p "请选择要使用白名单配置：" choice_whitelist\n\n\t# 使用case语句根据用户选择设置变量\n\tcase $choice_whitelist in\n\t1)\n\t\tuse_whitelist=true\n\t\t;;\n\t2)\n\t\tuse_whitelist=false\n\t\t;;\n\t*)\n\t\techo "错误：请输入正确的选项" >&2\n\t\texit 1\n\t\t;;\n\tesac\n\n}\n\nfunction set_whitelist() {\n  if [ "$use_whitelist" = true ]; then\n    log_info "已经设置IP白名单"\n    sed -i -r \'s/^(\\s*)#(.*include\\s*\\/usr\\/local\\/openresty\\/nginx\\/whitelist\\/corporation\\.conf;.*)$/\\1\\2/g\' "$conf_file"\n  else\n    log_info "不使用IP白名单"\n  fi\n}\n\nfunction check_nginx() {\n\tconf_file="/chen/company_shell/$realm_name.conf"\n\t# 检查Nginx配置文件\n\tif nginx -t >/dev/null 2>&1; then\n\t\techo "Nginx configuration test passed."\n\telse\n\t\techo "Nginx configuration test failed. Please check your configuration file."\n\t\texit 1\n\tfi\n}\n\nfunction kubernetes_nginx() {\n\tre_301=\'rewrite ^/(.*)$ https://$host/$1 permanent;\'\n\ttld=$(echo "$realm_name" | sed -E \'s/.*\\.([^.]+\\.[^.]+)$/\\1/\')\n\tcat >$realm_name.conf <<EOF\nserver {\n        listen       80;\n        server_name  $realm_name;\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n        $re_301\n}\nserver {\n        listen       443 ssl;\n        server_name  $realm_name;\n        ssl                   on;\n        ssl_certificate      /usr/local/openresty/nginx/ssl/$tld.crt;\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/$tld.key;\n        include ssl.conf;\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n\n        location / {\n           proxy_pass  http://kubernetes-cluster;\n           include https_proxy.conf;\n        }\n}\nEOF\n}\n\nfunction proxy_nginx() {\n\tread -p "设置反向代理（列如：http://172.18.199.115）：" proxy_ip\n\tre_301=\'rewrite ^/(.*)$ https://$host/$1 permanent;\'\n\ttld=$(echo "$realm_name" | sed -E \'s/.*\\.([^.]+\\.[^.]+)$/\\1/\')\n\tcat >$realm_name.conf <<EOF\nserver {\n        listen       80;\n        server_name  $realm_name;\n\t    $re_301\n\t\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n}\nserver {\n        listen       443 ssl;\n        server_name  $realm_name;\n\n\t# IP白名单\n        #include /usr/local/openresty/nginx/whitelist/corporation.conf;\n\n        ssl                   on;\n        ssl_certificate      /usr/local/openresty/nginx/ssl/$tld.crt;\n        ssl_certificate_key  /usr/local/openresty/nginx/ssl/$tld.key;\n        include ssl.conf;\n\n        location / {\n        \tproxy_pass  $proxy_ip;\n\t\tinclude https_proxy.conf;\n        }\n}\nEOF\n}\n\nfunction upstream_nginx() {\n\tpass\n}\n\n# 定义函数：生产域名\nfunction set_kubernetes_nginx() {\n\t# TODO: 在这里实现生产域名的操作\n\tlog_info "开始配置nginx模板"\n\tread -p "请输您的域名:  " realm_name\n\tlog_info "域名记录： $realm_name"\n\tget_Whitelist\n\tkubernetes_nginx\n\t# 输出变量值\n\tset_whitelist\n\t#配置文件校检\n\tcheck_nginx\n}\n\nfunction set_reverse_proxy_nginx() {\n\t# TODO: 在这里实现生产域名的操作\n\tlog_info "开始配置nginx模板"\n\tread -p "请输您的域名:  " realm_name\n\tlog_info "域名记录： $realm_name"\n\tget_Whitelist\n\tproxy_nginx\n\t# 输出变量值\n\tset_whitelist\n\t#配置文件校检\n\tcheck_nginx\n}\n\nfunction set_upstream_proxy_nginx() {\n\t# TODO: 在这里实现生产域名的操作\n\tlog_info "开始配置nginx模板"\n\tread -p "请输您的域名:  " realm_name\n\tlog_info "域名记录： $realm_name"\n\tget_Whitelist\n\tupstream_nginx\n\t# 输出变量值\n\tset_whitelist\n\t#配置文件校检\n\tcheck_nginx\n}\n\n# 定义主函数\nfunction main() {\n\t# 显示菜单\n\techo "请选择一个选项："\n\techo "1. kubernetes接入"\n\techo "2. 反向代理接入"\n\techo "3. 负载均衡接入"\n\n\t# 读取用户输入\n\tread -p "请输您的选择:  " choice\n\n\t# 根据用户输入选择对应的操作\n\tcase $choice in\n\t1) set_kubernetes_nginx ;;\n\t2) set_reverse_proxy_nginx ;;\n\t3) set_upstream_proxy_nginx ;;\n\t*) echo "无效的选项，请重新输入" ;;\n\tesac\n\n}\n\n# 调用主函数\nmain\n\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4133ca74f16e49aea444f688035065a2.png)\n\n',
        'tags': 'nginx,自动化,运维',
        'categories': 'Nginx',
        'type': 'original',
        'status': 1,
        'read_type': 'public',
        'reason': '',
        'resource_url': '',
        'original_link': '',
        'authorized_status': False,
        'check_original': False,
        'editor_type': 1,
        'plan': [],
        'vote_id': 0,
        'scheduled_time': 0,
        'level': '1',
        'cover_type': '1',
        'cover_images': ['https://img-blog.csdnimg.cn/a7b17f5b94b34c36a5a59113f68438c1.png']
    }
}


# data=json.dumps(text,ensure_ascii=False)
# data=json.loads(data)
#
# print(data['data'])
# print(f"标题： {data['data']['title']}")
# print(f"描述： {data['data']['description']}")
# print(f"markdown： {data['data']['markdowncontent']}")
# print(f"categories： {data['data']['categories']}")
# print(f"tags： {data['data']['tags']}")

import requests
from bs4 import BeautifulSoup

# 设置请求头
headers = {
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36'
}

url = "https://blog.csdn.net/heian_99/article/details/130099639"

# 发送get请求获取响应
reply = requests.get(url=url, headers=headers)
# 使用BeautifulSoup解析响应
parse = BeautifulSoup(reply.content, "lxml")
# 查找包含“special-column-name”类名的所有<div>标签
spans = parse.find_all('div', attrs={'class': 'up-time'})
print(spans)
for div in spans:
    # 获取<div>标签中的文本内容
    publish_time = div.text.strip()
    pattern = re.compile(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')
    match = pattern.search(publish_time)
    if match:
        datetime_str = match.group()
        print(datetime_str)
    else:
        print('未找到时间')




